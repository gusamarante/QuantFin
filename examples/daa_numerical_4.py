from quantfin.portfolio import DAACosts
import pandas as pd
import numpy as np

notional = 100

# ===== Simulate Data =====
transmat = pd.DataFrame(data=np.array([
    [0.86, 0.04, 0, 0.1],
    [0.013, 0.544, 0.148, 0.295],
    [0, 0.13, 0.433, 0.437],
    [0.673, 0.167, 0, 0.16]
]),
    index=['From State 1', 'From State 2', 'From State 3', 'From State 4'],
    columns=['To State 1', 'To State 2', 'To State 3', 'To State 4'])

means = pd.DataFrame(data=np.array([
    [0.002522, 0.003766, 0.007028, 0.007863],
    [0.036255, 0.026889, 0.006604, -0.033534],
    [0.016122, -0.016119, -0.056298, -0.021536],
    [-0.012106, -0.003925, 0.000964, 0.016015]
]),
    index=['State 1', 'State 2', 'State 3', 'State 4'],
    columns=['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4'])

mindex = pd.MultiIndex.from_product([['State 1', 'State 2', 'State 3', 'State 4'], ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4']])
covars = pd.DataFrame(index=mindex, columns=['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4'],
                      data=np.array([
                          [0.000446265625, 0.00037768400687875, 0.0000316955013895, -0.000005542708041],
                          [0.00037768400687875, 0.000486423025, 0.00010011029133534, 0.00005604026681682],
                          [0.0000316955013895, 0.00010011029133534, 0.000518563984, 0.000124083067844736],
                          [-0.000005542708041, 0.00005604026681682, 0.000124083067844736, 0.000368179344],
                          [0.000857907375, 0.000607062950476455, 0.000064126119396972, 0.00008930524349214],
                          [0.00040041473747925, 0.00061679013, 0.000322857752486184, 0.000276838465178808],
                          [0.0000495170668395, 0.00037796783748174, 0.000769784688, 0.000417302689319568],
                          [0.000075678996306875, 0.000355671046112745, 0.000457962203515332, 0.000599797692],
                          [0.000904657, 0.00083573456605188, 0.000771265563365792, 0.00077050224577872],
                          [0.00136469403389963, 0.001610169385, 0.00140235335597425, 0.00133179319930457],
                          [0.00114013856326013, 0.00126953367331082, 0.001553984052, 0.00110929012688005],
                          [0.00113711243185313, 0.00120364762620795, 0.00110744190232554, 0.00110148714],
                          [0.000893862125, 0.00074793119686747, -0.000137242513722024, 0.000062194116955932],
                          [0.000721861599459, 0.00094033698, -0.000018231691495776, 0.000149533875238176],
                          [-0.00010912443817275, -0.00001501993416693, 0.000825872124, 0.00053050221490266],
                          [0.000051338612446875, 0.00012789162864225, 0.0005507425933695, 0.0006087393]
                      ]))

# ===== Compute Allocations =====
start_alloc = 10000000000 * np.array([0.25, 0.25, 0.25, 0.25])

Lambda1 = (1 / 10000) * np.eye(4)
Lambda2 = (1 / 10000) * np.eye(4)
Lambda3 = (1 / 10000) * np.eye(4)
Lambda4 = (1 / 10000) * np.eye(4)
Lambda = np.array([Lambda1, Lambda2, Lambda3, Lambda4])

daa = DAACosts(means=means,
               covars=covars,
               costs=Lambda,
               transition_matrix=transmat,
               current_allocation=start_alloc,
               risk_aversion=1.08679386478568e-9,
               discount_factor=0.99,
               include_returns=True,
               normalize=True)

print('Model Allocations')
print(daa.allocations, '\n')

print('Aim Portfolios')
print(daa.aim_portfolios, '\n')

print('Mkw Portfolios')
print(daa.markowitz_portfolios, '\n')
